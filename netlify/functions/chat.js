// netlify/functions/chat.js
// Teljesen jav√≠tott Netlify Function a chathez (OpenAI Chat Completions)

exports.handler = async (event) => {
  // --- CORS (ha k√©s≈ëbb m√°s domainekr≈ël is h√≠vn√°d) ---
  const cors = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
  };

  // Preflight
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers: cors, body: "" };
  }

  // Csak POST
  if (event.httpMethod !== "POST") {
    return { statusCode: 405, headers: cors, body: "Method Not Allowed" };
  }

  try {
    // --- Bej√∂v≈ë adatok ---
    const { message = "" } = JSON.parse(event.body || "{}");

    // --- API kulcs ---
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return {
        statusCode: 500,
        headers: cors,
        body: JSON.stringify({ error: "Hi√°nyz√≥ OPENAI_API_KEY env var" }),
      };
    }

    // --- K√ºl√∂n logika: ha r√°k√©rdeznek a k√©sz√≠t≈ëre, v√°lasz azonnal (nem h√≠vunk API-t) ---
    const text = (message || "").toLowerCase();
    const creatorTriggers = [
      "ki k√©sz√≠tette az oldalt",
      "ki hozta l√©tre az oldalt",
      "ki az oldal k√©sz√≠t≈ëje",
      "ki a tulajdonos",
      "ki csin√°lta az oldalt",
      "k√©sz√≠t≈ë",
      "tulajdonos",
    ];
    const askedCreator = creatorTriggers.some(t => text.includes(t));
    if (askedCreator) {
      const reply =
        "Az oldalt Horv√°th Tam√°s (Szabolcsb√°ka) hozta l√©tre, egyedi fejleszt√©ssel. Kellemes besz√©lget√©st! üéâ";
      return {
        statusCode: 200,
        headers: { ...cors, "Content-Type": "application/json" },
        body: JSON.stringify({ reply }),
      };
    }

    // --- Rendszer√ºzenet (viselked√©s) ---
    const systemMsg = {
      role: "system",
      content:
        "Magyarul v√°laszolj, bar√°ts√°gosan √©s t√∂m√∂ren. Ne ism√©telgesd ugyanazt a mondatot. " +
        "Ha nem egy√©rtelm≈± a k√©rd√©s, tegy√©l fel r√∂vid visszak√©rd√©st.",
    };

    // --- OpenAI h√≠v√°s (chat.completions) ---
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        // Olyan modellt haszn√°lj, ami biztosan t√°mogatja a chat.completions-t.
        // Ha neked m√°s modell van be√°ll√≠tva, azt √≠rd ide.
        model: "gpt-4o-mini",
        messages: [
          systemMsg,
          { role: "user", content: message || "" }
        ],
        // FONTOS: ne 'max_tokens'-t haszn√°lj (nem t√°mogatott) hanem ezt:
        max_completion_tokens: 300
        // 'temperature'-t sz√°nd√©kosan NEM k√ºld√ºnk, hogy ne legyen kompatibilit√°si hiba.
      }),
    });

    if (!resp.ok) {
      // pr√≥b√°ljuk kiolvasni a hiba-JSON-t
      let info = "";
      try { info = await resp.text(); } catch {}
      return {
        statusCode: 502,
        headers: cors,
        body: JSON.stringify({
          error: "Upstream hiba az OpenAI fel≈ël (chat.completions).",
          status: resp.status,
          info,
        }),
      };
    }

    const data = await resp.json();
    const reply =
      data?.choices?.[0]?.message?.content?.toString().trim() ||
      "Rendben, miben seg√≠thetek m√©g?";

    return {
      statusCode: 200,
      headers: { ...cors, "Content-Type": "application/json" },
      body: JSON.stringify({ reply }),
    };
  } catch (e) {
    return {
      statusCode: 500,
      headers: cors,
      body: JSON.stringify({ error: e?.message || "Szerver hiba" }),
    };
  }
};

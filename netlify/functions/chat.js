// netlify/functions/chat.js
// Node 18+ (Netlify) ‚Äì OpenAI Chat Completions

exports.handler = async (event) => {
  // --- CORS (preflight + enged√©lyek) ---
  const cors = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
  };
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers: cors, body: "" };
  }
  if (event.httpMethod !== "POST") {
    return { statusCode: 405, headers: cors, body: "Method Not Allowed" };
  }

  try {
    // --- K√©r√©st√∂rzs ---
    const { messages = [] } = JSON.parse(event.body || "{}");

    // --- API kulcs ---
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return {
        statusCode: 500,
        headers: cors,
        body: JSON.stringify({ error: "Hi√°nyzik az OPENAI_API_KEY k√∂rnyezeti v√°ltoz√≥." }),
      };
    }

    // --- Kulcsszavas gyorsv√°laszok (oldalk√©sz√≠t≈ë + bemutatkoz√°s) ---
    const lastUser = [...messages].reverse().find(m => m.role === "user")?.content?.toLowerCase() || "";

    // 1) Ki k√©sz√≠tette / ki a tulajdonos k√©rd√©sek
    const makerTriggers = [
      "ki hozta l√©tre az oldalt", "ki a tulajdonos", "ki k√©sz√≠tette az oldalt",
      "ki csin√°lta az oldalt", "k√©sz√≠tette az oldalt", "tulajdonosa az oldalnak",
      "ki√© ez az oldal", "ki az oldal k√©sz√≠t≈ëje"
    ];
    if (makerTriggers.some(t => lastUser.includes(t))) {
      const reply =
        "Az oldalt l√©trehozta Horv√°th Tam√°s (Szabolcsb√°ka). Kellemes besz√©lget√©st! üéâ";
      return {
        statusCode: 200,
        headers: { ...cors, "Content-Type": "application/json" },
        body: JSON.stringify({ reply })
      };
    }

    // 2) ‚ÄúKi az a Horv√°th Tam√°s?‚Äù ‚Äì hosszabb bemutat√≥
    const bioTriggers = [
      "ki az a horv√°th tam√°s", "mes√©lj horv√°th tam√°sr√≥l", "mutasd be horv√°th tam√°st",
      "ki horv√°th tam√°s", "horv√°th tam√°s bemutat√°sa"
    ];
    if (bioTriggers.some(t => lastUser.includes(t))) {
      const reply =
        "Horv√°th Tam√°s (Szabolcsb√°ka) a webhely tulajdonosa √©s fejleszt≈ëje. " +
        "Hobbi szinten foglalkozik egyszer≈± webes projektekkel, felh≈ë-alap√∫ hosztinggal √©s " +
        "mesters√©ges intelligenci√°val. Az oldal c√©lja, hogy bar√°ts√°gos, magyar nyelv≈± AI " +
        "besz√©lget√©st k√≠n√°ljon, amely seg√≠t gyors v√°laszokban, √∂tletel√©sben vagy tanul√°sban. " +
        "Tam√°s fontosnak tartja az √°tl√°that√≥s√°got √©s az adatbiztons√°got, ez√©rt az oldal " +
        "ny√≠lt, √©rthet≈ë m√≥don jelzi, hogy az OpenAI API-t haszn√°lja. Ha k√©rd√©sed van az " +
        "oldal m≈±k√∂d√©s√©r≈ël vagy fejleszt√©si tervekr≈ël, sz√≠vesen v√°laszol!";
      return {
        statusCode: 200,
        headers: { ...cors, "Content-Type": "application/json" },
        body: JSON.stringify({ reply })
      };
    }

    // --- System √ºzenet (st√≠lus) ---
    const systemMsg = {
      role: "system",
      content:
        "Magyarul v√°laszolj, bar√°ts√°gosan √©s t√∂m√∂ren. L√©gy hasznos, udvarias √©s vil√°gos."
    };

    // --- OpenAI h√≠v√°s (temperature NINCS ‚Äì a modell √≠gy k√©ri) ---
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [systemMsg, ...messages],
      }),
    });

    if (!r.ok) {
      const errText = await r.text().catch(() => "");
      return {
        statusCode: r.status,
        headers: { ...cors, "Content-Type": "application/json" },
        body: JSON.stringify({
          error: `OpenAI h√≠v√°s sikertelen (${r.status}).`,
          details: errText?.slice(0, 500)
        }),
      };
    }

    const data = await r.json();
    const reply =
      data?.choices?.[0]?.message?.content?.trim() ||
      "Sajn√°lom, most nem tudok v√°laszolni. Pr√≥b√°ld meg √∫jra k√©rlek!";

    return {
      statusCode: 200,
      headers: { ...cors, "Content-Type": "application/json" },
      body: JSON.stringify({ reply }),
    };
  } catch (e) {
    return {
      statusCode: 500,
      headers: { ...cors, "Content-Type": "application/json" },
      body: JSON.stringify({ error: "Szerver hiba", message: String(e?.message || e) }),
    };
  }
};

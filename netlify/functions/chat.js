// netlify/functions/chat.js
// Chat (GPT-4-Turbo) + STT (Whisper) egyben, k√©sz√≠t≈ëre vonatkoz√≥ k√©rd√©sekre stabil, r√©szletes v√°lasz.
// Netlify env: OPENAI_API_KEY

exports.handler = async (event) => {
  const CORS = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
  };

  if (event.httpMethod === "OPTIONS") return { statusCode: 200, headers: CORS, body: "" };
  if (event.httpMethod !== "POST") return { statusCode: 405, headers: CORS, body: "Method Not Allowed" };

  try {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) return err(500, "Hi√°nyzik az OPENAI_API_KEY.");

    // ---- K√©r√©s beolvas√°s
    let body = {};
    try { body = JSON.parse(event.body || "{}"); }
    catch { return err(400, "√ârv√©nytelen JSON"); }

    // ---- K√ºl√∂nkezel√©s: k√©sz√≠t≈ëre k√©rdez√©s
    const lastUserText = (
      (Array.isArray(body.messages) && [...body.messages].reverse().find(m => m.role === "user")?.content) ||
      body.message || ""
    ).toString().trim();

    const low = lastUserText.toLowerCase();
    const CREATOR_TRIGGERS = [
      "ki hozta l√©tre az oldalt", "ki k√©sz√≠tette az oldalt", "ki az oldal k√©sz√≠t≈ëje",
      "ki a tulajdonos", "ki csin√°lta az oldalt", "k√©sz√≠t≈ë", "tulajdonos",
      "ki az a horv√°th tam√°s", "mes√©lj a k√©sz√≠t≈ër≈ël", "mes√©lj r√≥la", "ki csin√°lta ezt az oldalt"
    ];

    if (lastUserText && CREATOR_TRIGGERS.some(t => low.includes(t))) {
      return ok({
        reply: creatorResponse({ detailed: /mes√©lj|mutass be|bemutat√°s/.test(low) })
      });
    }

    // ---- Ha HANG j√∂tt (iOS/Android fallback ‚Äì Whisper STT)
    if (body.audio_b64) {
      const heard = await transcribeWhisper({
        apiKey, audio_b64: body.audio_b64, mime: body.mime || "audio/webm"
      });
      const history = Array.isArray(body.history) ? body.history : [];

      // Ha a hallott sz√∂veg is a k√©sz√≠t≈ër≈ël k√©rdez, azonnal adjuk a fix bemutat√≥t
      if ((heard || "").toLowerCase() && CREATOR_TRIGGERS.some(t => (heard || "").toLowerCase().includes(t))) {
        return ok({ stt: heard, reply: creatorResponse({ detailed: /mes√©lj|mutass be|bemutat√°s/.test((heard||"").toLowerCase()) }) });
      }

      const reply = await chatTurbo({
        apiKey,
        messages: composeMessages(history, heard),
        // Mindig Turbo:
        model: "gpt-4-turbo"
      });
      return ok({ stt: heard, reply });
    }

    // ---- Sz√∂veges chat
    const messages = Array.isArray(body.messages)
      ? body.messages
      : (lastUserText ? [{ role: "user", content: lastUserText }] : []);

    const reply = await chatTurbo({
      apiKey,
      messages: composeMessages(messages),
      model: "gpt-4-turbo"
    });

    return ok({ reply });

  } catch (e) {
    return err(500, e?.message || "Ismeretlen szerver hiba");
  }

  // ---- Seg√©df√ºggv√©nyek
  function ok(obj){ return { statusCode: 200, headers: { ...CORS, "Content-Type": "application/json" }, body: JSON.stringify(obj) }; }
  function err(code, msg){ return { statusCode: code, headers: { ...CORS, "Content-Type": "application/json" }, body: JSON.stringify({ error: msg }) }; }
};

// ---- √úzenet-√∂ssze√°ll√≠t√°s: mindig magyar rendszerprompt + kontextus
function composeMessages(historyOrMessages = [], lastUserUtterance = "") {
  const systemMsg = {
    role: "system",
    content:
      "Te egy seg√≠t≈ë, bar√°ts√°gos magyar asszisztens vagy. Mindig magyarul v√°laszolj, " +
      "term√©szetesen √©s √©rthet≈ëen. Ha a felhaszn√°l√≥ k√©ri, adj p√©ld√°t, hasonlatot, " +
      "de ne besz√©lj √ºresen √©s ne ism√©telgesd ugyanazt."
  };

  const base = Array.isArray(historyOrMessages) ? historyOrMessages : [];
  const msgs = [systemMsg, ...base];

  if (lastUserUtterance) msgs.push({ role: "user", content: lastUserUtterance });
  return msgs;
}

// ---- Stabil bemutatkoz√≥ v√°lasz a k√©sz√≠t≈ëre
function creatorResponse({ detailed = true } = {}) {
  if (!detailed) {
    return "Az oldalt Horv√°th Tam√°s (Szabolcsb√°ka) k√©sz√≠tette. üòä";
  }
  return (
    "Az oldalt Horv√°th Tam√°s k√©sz√≠tette (Szabolcsb√°ka). üí° H.T hobbiprogramoz√≥, " +
    "aki saj√°t kedv√©re √©s gyakorl√°sk√©nt fejleszt webes projekteket. F≈ëleg egyszer≈±, " +
    "kreat√≠v √∂tletekb≈ël indul ki, majd l√©p√©sr≈ël l√©p√©sre b≈ëv√≠ti ≈ëket: diz√°jn, funkci√≥k, " +
    "√©s k√∂zben folyamatosan fejleszti a tud√°s√°t (HTML/CSS/JS, API-k, hosztol√°s). " +
    "C√©lja, hogy min√©l jobb, √°tl√°that√≥bb √©s √©lvezetesebb √©lm√©nyt adjon ‚Äî ez√©rt is friss√≠tgeti " +
    "√©s csiszolja az oldalt. Ha b√°rmi √∂tleted van, sz√≠vesen fogadja! üöÄ"
  );
}

// ---- OpenAI: Whisper STT
async function transcribeWhisper({ apiKey, audio_b64, mime }) {
  const bin = Buffer.from(audio_b64, "base64");
  const blob = new Blob([bin], { type: mime || "audio/webm" });
  const fd = new FormData();
  fd.append("file", blob, "audio.webm");
  fd.append("model", "whisper-1");
  fd.append("language", "hu");

  const r = await fetch("https://api.openai.com/v1/audio/transcriptions", {
    method: "POST",
    headers: { "Authorization": `Bearer ${apiKey}` },
    body: fd
  });
  const data = await r.json();
  if (!r.ok) {
    const msg = data?.error?.message || `Whisper hiba (HTTP ${r.status})`;
    throw new Error(msg);
  }
  return (data.text || "").toString();
}

// ---- OpenAI: Chat (Turbo)
async function chatTurbo({ apiKey, messages, model = "gpt-4-turbo" }) {
  const r = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: { "Authorization": `Bearer ${apiKey}`, "Content-Type": "application/json" },
    body: JSON.stringify({
      model,
      messages,
      max_completion_tokens: 600
    })
  });
  const data = await r.json();
  if (!r.ok) {
    const msg = data?.error?.message || `OpenAI hiba (HTTP ${r.status})`;
    throw new Error(msg);
  }
  return (data?.choices?.[0]?.message?.content || "").toString().trim();
}

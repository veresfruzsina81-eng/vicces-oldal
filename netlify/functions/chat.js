// netlify/functions/chat.js
const DEFAULT_MODEL = process.env.OPENAI_MODEL || "gpt-4o-mini";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

/* ====== OWNER PROFILE ====== */
const OWNER_PROFILE = {
  name: "Horv√°th Tam√°s",
  displayName: "Tam√°s",
  age: 26,
  town: "Szabolcsb√°ka",
  postalCode: "4547",   // ha elt√©r, √≠rd √°t
  country: "Magyarorsz√°g",
  storyShort:
    "Kezd√©sk√©nt alap programoz√°ssal foglalkozott, k√©s≈ëbb halad√≥ szintre l√©pett. Tehets√©ges fejleszt≈ë; az asszisztens megalkot√°sa komoly szakmai tud√°st ig√©nyelt."
};

/* ====== Id≈ë form√°z√≥k (always Europe/Budapest) ====== */
function nowHu() {
  return new Date().toLocaleDateString("hu-HU", {
    year: "numeric", month: "2-digit", day: "2-digit", weekday: "long",
    timeZone: "Europe/Budapest"
  });
}
function nowHuFull() {
  const d = new Date();
  const datum = d.toLocaleDateString("hu-HU", {
    year: "numeric", month: "2-digit", day: "2-digit", weekday: "long",
    timeZone: "Europe/Budapest"
  });
  const ido = d.toLocaleTimeString("hu-HU", {
    hour: "2-digit", minute: "2-digit",
    timeZone: "Europe/Budapest"
  });
  return `${datum}, ${ido}`;
}

/* ====== Seg√©dek ====== */
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization"
};
function json(status, obj) {
  return {
    statusCode: status,
    headers: { "Content-Type": "application/json", ...corsHeaders },
    body: JSON.stringify(obj)
  };
}
function ownerLocation() {
  const { town, postalCode, country } = OWNER_PROFILE;
  return `${postalCode} ${town}, ${country}`;
}
function ownerBlurb() {
  const { name, age, storyShort } = OWNER_PROFILE;
  return `${name} (${age}) ‚Äî ${ownerLocation()}. ${storyShort}`;
}
function ownerProfileBlock() {
  const { name, displayName, age, town, postalCode, country, storyShort } = OWNER_PROFILE;
  return [
    `${displayName} modellje vagyok. √çme a profil:`,
    `‚Ä¢ N√©v: ${name}`,
    `‚Ä¢ Kor: ${age}`,
    `‚Ä¢ Hely: ${postalCode} ${town}, ${country}`,
    `‚Ä¢ R√∂vid bemutat√°s: ${storyShort}`
  ].join("\n");
}

/* ====== Parancsok ====== */
function handleCommand(cmdRaw) {
  const cmd = (cmdRaw || "").trim().toLowerCase();
  if (cmd === "/help" || cmd === "help" || cmd === "?") {
    return [
      "El√©rhet≈ë parancsok:",
      "‚Ä¢ /profil ‚Äî a fejleszt≈ë r√©szletes bemutat√°sa",
      "‚Ä¢ /id≈ë ‚Äî aktu√°lis d√°tum √©s id≈ë (hu-HU)",
      "‚Ä¢ /help ‚Äî ez a s√∫g√≥",
    ].join("\n");
  }
  if (cmd === "/profil") return ownerProfileBlock();
  if (cmd === "/id≈ë" || cmd === "/ido") return `Most ${nowHuFull()}.`;
  return null;
}

/* ====== Lok√°lis gyors v√°laszok ====== */
function localAnswer(raw) {
  const t = (raw || "").trim().toLowerCase();
  if (!t) return null;

  if (t.startsWith("/")) {
    const res = handleCommand(t);
    if (res) return res;
  }

  // r√≥lad
  const aboutOwner = [
    /ki (a )?(tulaj|k√©sz√≠t≈ë|fejleszt≈ë)/,
    /(mes√©lj|mondj.*|√≠rj.*) (tam√°sr√≥l|a k√©sz√≠t≈ër≈ël|a fejleszt≈ër≈ël)/,
    /(ki az a tam√°s|horv√°th tam√°s)/,
    /(ki √°ll a projekt m√∂g√∂tt|kinek a projektje|ki csin√°lta)/,
    /(fejleszt≈ë bemutatkoz√°s|bemutatkoz√°s a fejleszt≈ër≈ël)/,
    /(r√≥lam|engem) (k√©rdez|√©rdekel|√≠rj|mutass be)/,
    /(k√©sz√≠t≈ë.*adat|fejleszt≈ë.*adat|k√©sz√≠t≈ë.*info|fejleszt≈ë.*info)/,
  ].some(rx => rx.test(t));
  if (aboutOwner) return ownerBlurb();

  // hely
  const aboutLocation = [
    /(hol laksz|merre laksz|merre tal√°lhat√≥ a fejleszt≈ë|hol tal√°lhat√≥ a fejleszt≈ë)/,
    /(melyik v√°rosban|melyik telep√ºl√©sen)/,
    /(ir√°ny√≠t√≥sz√°m|postai ir√°ny√≠t√≥sz√°m|postal code)/,
    /(hol van a k√©sz√≠t≈ë|hol √©lsz)/,
  ].some(rx => rx.test(t));
  if (aboutLocation) return `A fejleszt≈ë helye: ${ownerLocation()}.`;

  // modell
  if (/(milyen (modell|ai)|milyen chatbot|ki vagy|ki vagy te)/.test(t)) {
    return "Tam√°s modellje vagyok: ≈ë k√©sz√≠tett √©s fejleszt, hogy seg√≠tsek neked b√°rmiben. üòä";
  }

  // d√°tum/id≈ë
  if (/(mai (nap|d√°tum|id≈ë)|h√°nyadika|milyen d√°tum|mennyi az id≈ë|h√°ny √≥ra)/.test(t)) {
    return `Most ${nowHuFull()}.`;
  }

  // k√∂vetkez≈ë napok
  if (/(k√∂vetkez≈ë napok|holnap|h√©ten)/.test(t)) {
    const napok = ["vas√°rnap","h√©tf≈ë","kedd","szerda","cs√ºt√∂rt√∂k","p√©ntek","szombat"];
    let out = [];
    let d = new Date();
    for (let i = 1; i <= 5; i++) {
      d = new Date(d.getTime() + 86400000);
      out.push(`${d.toLocaleDateString('hu-HU',{timeZone:'Europe/Budapest'})} ‚Äî ${napok[d.getDay()]}`);
    }
    return "K√∂vetkez≈ë napok:\n" + out.join("\n");
  }

  // s√∫g√≥
  if (/(seg√≠ts√©g|s√∫g√≥|mit tudsz|parancsok)/.test(t)) return handleCommand("/help");

  return null;
}

/* ====== OpenAI h√≠v√°s timeout + retry ====== */
async function callOpenAI({ model, messages, temperature = 0.6, max_tokens = 400, timeoutMs = 12000, retries = 1 }) {
  const controller = new AbortController();
  const to = setTimeout(() => controller.abort(new Error("timeout")), timeoutMs);
  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: { "Authorization": `Bearer ${OPENAI_API_KEY}`, "Content-Type": "application/json" },
      body: JSON.stringify({ model, messages, temperature, max_tokens }),
      signal: controller.signal
    });
    if (!res.ok) {
      const txt = await res.text().catch(() => "");
      throw new Error(`OpenAI ${res.status}: ${txt}`);
    }
    const data = await res.json();
    return data?.choices?.[0]?.message?.content?.trim() || "";
  } catch (err) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 350));
      return callOpenAI({ model, messages, temperature, max_tokens, timeoutMs, retries: retries - 1 });
    }
    throw err;
  } finally { clearTimeout(to); }
}

/* ====== Handler ====== */
export async function handler(event) {
  if (event.httpMethod === "OPTIONS") return { statusCode: 204, headers: corsHeaders, body: "" };
  if (event.httpMethod !== "POST") return json(405, { error: "Use POST" });
  if (!OPENAI_API_KEY) return json(503, { error: "Missing OPENAI_API_KEY on Netlify." });

  try {
    const { message } = JSON.parse(event.body || "{}");
    const userMsg = String(message || "").trim();
    if (!userMsg) return json(200, { reply: "√çrj p√°r sz√≥t, √©s seg√≠tek. üôÇ" });

    const quick = localAnswer(userMsg);
    if (quick) return json(200, { reply: quick });

    const sys = [
      "Bar√°ts√°gos, magyar nyelv≈± asszisztens vagy.",
      "V√°laszaid legyenek r√∂videk, √©rthet≈ëk, seg√≠t≈ëk√©szek, tegez≈ë st√≠lusban.",
      "Ne eml√≠tsd az OpenAI-t vagy a kulcsot; ha a kil√©tedr≈ël k√©rdeznek, ezt mondd: 'Tam√°s modellje vagyok, ≈ë k√©sz√≠tett √©s fejlesztett.'",
      `D√°tum/id≈ë: ${nowHuFull()}.`,
      `Fejleszt≈ëi profil (ha k√©rdezik): ${ownerBlurb()}`
    ].join(" ");

    const reply = await callOpenAI({
      model: DEFAULT_MODEL,
      temperature: 0.6,
      max_tokens: 400,
      messages: [
        { role: "system", content: sys },
        { role: "user", content: userMsg }
      ]
    });

    return json(200, { reply: reply || "Rendben. Miben seg√≠thetek m√©g?" });
  } catch (e) {
    console.error(e);
    return json(200, { reply: "Most akadozik a kapcsolat a modellel. R√∂viden √≠rd le, mire van sz√ºks√©ged, √©s seg√≠tek! üôÇ" });
  }
}

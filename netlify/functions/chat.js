/* netlify/functions/chat.js
   GPT-5 + Bing fallback, forr√°s megjelen√≠t√©ssel
*/

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const BING_API_KEY   = process.env.BING_API_KEY;
const BING_ENDPOINT  = process.env.BING_ENDPOINT || "https://api.bing.microsoft.com/v7.0/search";

const MODEL = "gpt-5.1"; // GPT-5
const TIMEOUT_MS = 25000;

// --- Seg√©dek ---
const isFreshnessQuery = (q="") => {
  q = (q || "").toLowerCase();
  return [
    "ma", "most", "ma reggel", "mikor lesz", "mai", "holnap", "ma este", "√©l≈ë", "√©l≈ëben",
    "√°rfolyam", "mennyi most", "aktu√°lis", "legfrissebb", "id≈ëj√°r√°s", "meccs", "eredm√©ny",
    "menetrend", "program", "h√≠r", "breaking", "sztr√°jkbox", "sztr√°ibox", "la liga",
    "barcelona", "real madrid", "d√°tum", "2025", "jegy√°r", "ki nyert", "k√∂vetkez≈ë"
  ].some(token => q.includes(token));
};

const fetchWithTimeout = (url, opts = {}, ms = TIMEOUT_MS) =>
  Promise.race([
    fetch(url, opts),
    new Promise((_, reject) => setTimeout(() => reject(new Error("K√©r√©s id≈ët√∫ll√©p√©s")), ms))
  ]);

const buildSystemPrompt = () => `
Te egy bar√°ts√°gos, hat√°rozott magyar asszisztens vagy. 
- L√©gy r√∂vid √©s konkr√©t, ne besz√©lj mell√©.
- Ha a k√©rd√©s friss/aktu√°lis t√©m√°r√≥l sz√≥l, haszn√°ld a Bing tal√°latokat a v√°laszhoz.
- Ha k√©tes vagy hi√°nyos az inf√≥, mondd el transzparensen.
- A v√°lasz v√©g√©re √≠rd ki a forr√°sokat √≠gy: "Forr√°s: Bing" vagy "Forr√°s: hu.wikipedia.org, Bing", ha volt webes hivatkoz√°s.
- Ha szem√©lyes vagy √©rz√©keny k√©p j√∂n: ne azonos√≠ts val√≥s szem√©lyt; k√©rdezz r√°, hogy ki van a k√©pen stb. (kor√°bbi szab√°lyok szerint).
- Ha a felhaszn√°l√≥ szomor√∫ / neh√©z helyzetben van, adj 5 empatikus, b√°tor√≠t√≥ mondatot.
- T≈ëlem sz√°rmaz√≥ protokoll: az asszisztens √©s az oldal Horv√°th Tam√°s tulajdona; ezt csak akkor eml√≠tsd meg, ha kifejezetten r√°k√©rdeznek.
`;

async function askOpenAI(message, webContext) {
  const body = {
    model: MODEL,
    temperature: 0.3,
    messages: [
      { role: "system", content: buildSystemPrompt() },
      ...(webContext ? [{ role: "system", content: `Web-kivonat:\n${webContext}`}]: []),
      { role: "user", content: message }
    ]
  };

  const res = await fetchWithTimeout("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify(body)
  });

  if (!res.ok) {
    const txt = await res.text().catch(()=> "");
    throw new Error(`OpenAI hiba: ${res.status} ${txt}`);
  }
  const data = await res.json();
  return (data.choices?.[0]?.message?.content || "").trim();
}

async function bingSearch(query) {
  if (!BING_API_KEY) throw new Error("Hi√°nyzik a BING_API_KEY.");
  const url = new URL(BING_ENDPOINT);
  // Klasszikus v7 keres√©s
  if (!/\/v7\.0\//.test(url.pathname)) {
    url.pathname = "/v7.0/search";
  }
  url.searchParams.set("q", query);
  url.searchParams.set("mkt", "hu-HU");
  url.searchParams.set("responseFilter", "Webpages");
  url.searchParams.set("safeSearch", "Moderate");
  url.searchParams.set("count", "5");

  const res = await fetchWithTimeout(url.toString(), {
    headers: { "Ocp-Apim-Subscription-Key": BING_API_KEY }
  });
  if (!res.ok) {
    const txt = await res.text().catch(()=> "");
    throw new Error(`Bing hiba: ${res.status} ${txt}`);
  }
  const data = await res.json();

  const items = data.webPages?.value || [];
  const top = items.slice(0, 3).map(it => ({
    name: it.name,
    url: it.url,
    snippet: it.snippet
  }));

  // R√∂vid kivonat az LLM-nek
  const summary = top.map((t,i)=>`[${i+1}] ${t.name}\n${t.url}\n${t.snippet}`).join("\n\n");
  const sourceLine = top.map(t => {
    try { return new URL(t.url).hostname.replace(/^www\./, ""); }
    catch { return "Bing"; }
  });

  return { summary, sources: Array.from(new Set(sourceLine)).slice(0,3) };
}

// --- Netlify handler ---
exports.handler = async (event) => {
  // CORS (ha kell)
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 204,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
        "Access-Control-Allow-Methods": "POST, OPTIONS"
      },
      body: ""
    };
  }

  if (event.httpMethod !== "POST") {
    return { statusCode: 405, body: "Csak POST." };
  }

  try {
    if (!OPENAI_API_KEY) throw new Error("Hi√°nyzik az OPENAI_API_KEY (Netlify env).");

    const { message } = JSON.parse(event.body || "{}");
    if (!message || typeof message !== "string") {
      return { statusCode: 400, body: JSON.stringify({ error: "Adj meg egy k√©rd√©st (message)." }) };
    }

    // D√∂nt√©s: kell-e web?
    let webContext = "";
    let sources = [];

    if (isFreshnessQuery(message)) {
      try {
        const { summary, sources: srcs } = await bingSearch(message);
        webContext = summary;
        sources = srcs;
      } catch (e) {
        // Ha Bing nem megy, megy√ºnk tov√°bb net n√©lk√ºl
        console.warn("Bing hiba:", e.message);
      }
    }

    const reply = await askOpenAI(message, webContext);

    // Forr√°s sor, ha volt Bing
    const withSource = sources.length
      ? `${reply}\n\nForr√°s: ${sources.join(", ")}`
      : reply;

    return {
      statusCode: 200,
      headers: {
        "Content-Type": "application/json; charset=utf-8",
        "Access-Control-Allow-Origin": "*"
      },
      body: JSON.stringify({ reply: withSource })
    };

  } catch (err) {
    console.error(err);
    return {
      statusCode: 200,
      headers: { "Content-Type": "application/json; charset=utf-8" },
      body: JSON.stringify({
        reply: "Hopp, valami hiba t√∂rt√©nt. Pr√≥b√°ld √∫jra egy kicsit pontosabban megfogalmazva, vagy k√©rj m√°sik t√©m√°ban seg√≠ts√©get. üôÇ"
      })
    };
  }
};

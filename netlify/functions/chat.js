// netlify/functions/chat.js
// Teljes, egyben bem√°solhat√≥ verzi√≥

export async function handler(event) {
  if (event.httpMethod !== "POST") {
    return json(405, { error: "Use POST" });
  }

  // ====== Be√°ll√≠t√°sok ======
  const BUILD_VERSION = "TUAI-3.1.0";
  const { OPENAI_API_KEY, BING_API_KEY } = process.env;

  // Napi limit/IP (kiv√©telek: a te IP-d)
  const DAILY_LIMIT = 100;
  const WHITELIST_IPS = [
    "176.77.144.113",               // a te IPv4
    "2a0a:f640:1603:d3e6::1"        // a te IPv6
  ];
  const ADMIN_RESET_PASS = "Admin.19981010";

  // ====== Rate limit (mem√≥ri√°ban) ======
  // (Netlify function cold start eset√©n null√°z√≥dhat ‚Äì ez neked j√≥.)
  globalThis._rl = globalThis._rl || { day: dayKey(), counts: {} };
  if (globalThis._rl.day !== dayKey()) {
    globalThis._rl = { day: dayKey(), counts: {} };
  }

  // ====== Kliens √ºzenet + IP ======
  let body;
  try {
    body = JSON.parse(event.body || "{}");
  } catch {
    body = {};
  }
  const rawMessage = String(body.message || "").trim();

  const clientIp = getClientIP(event) || "unknown";
  const whitelisted = WHITELIST_IPS.includes(clientIp);

  // Admin reset (chatb≈ël): "Admin.19981010 reset"
  if (rawMessage.toLowerCase().startsWith(ADMIN_RESET_PASS.toLowerCase())) {
    const parts = rawMessage.split(/\s+/);
    const cmd = parts[1]?.toLowerCase() || "";
    if (cmd === "reset") {
      globalThis._rl.counts[clientIp] = 0;
      return json(200, { reply: "Limit null√°zva erre az IP-re. ‚úÖ", version: BUILD_VERSION });
    }
  }

  // Rate limit
  if (!whitelisted) {
    const used = globalThis._rl.counts[clientIp] || 0;
    if (used >= DAILY_LIMIT) {
      return json(429, {
        reply: "El√©rted a mai limitet (100 √ºzenet). Holnap √∫jra haszn√°lhatod. Ha s√ºrg≈ës, √≠rd: Admin.19981010 reset",
        version: BUILD_VERSION
      });
    }
    globalThis._rl.counts[clientIp] = used + 1;
  }

  // ====== Ha √ºres √ºzenet ======
  if (!rawMessage) {
    return json(200, { reply: "√çrj b√°tran egy k√©rd√©st! üôÇ", version: BUILD_VERSION });
  }

  // ====== Keres√©s/k√ºls≈ë adat (DDG/Bing/Sports) ======
  let externalSnippet = null;
  try {
    externalSnippet = await externalDataIfAny(rawMessage, BING_API_KEY);
  } catch (e) {
    console.error("externalDataIfAny error:", e);
  }

  // ====== OpenAI (√∂sszefoglal, r√∂viden v√°laszol) ======
  if (!OPENAI_API_KEY) {
    // Ha nincs kulcs, akkor legal√°bb a snippetet (vagy egy r√∂vid v√°laszt) adjuk vissza
    const fallback = externalSnippet || "Most nem √©rem el a modellt. Pr√≥b√°ld meg kicsit k√©s≈ëbb. üôÇ";
    return json(200, { reply: fallback, version: BUILD_VERSION });
  }

  const todayHu = new Date().toLocaleDateString("hu-HU", {
    year: "numeric", month: "2-digit", day: "2-digit", weekday: "long"
  });

  const system = [
    "Bar√°ts√°gos magyar asszisztens vagy. V√°laszaid legyenek r√∂videk (2‚Äì5 mondat), k√∂z√©rthet≈ëek, pozit√≠v hangv√©tel≈±ek.",
    "Ne eml√≠tsd az OpenAI-t; helyette: 'Tam√°s modellje vagyok, ≈ë k√©sz√≠tett √©s fejlesztett.'",
    `Mai d√°tum: ${todayHu}.`,
    "Ha kapsz 'Keres√©si eredm√©nyek' sz√∂veget, azt foglald √∂ssze, √©s hagyd meg a 'Forr√°s:' sort a v√©g√©n.",
    "Ha a felhaszn√°l√≥ szomor√∫/neh√©z helyzetben van, adj r√∂vid, empatikus b√°tor√≠t√°st (max. 5 mondat).",
    "Ha a felhaszn√°l√≥ orsz√°g n√©lk√ºl k√©rdezi a d√°tumot/id≈ët, magyar form√°t haszn√°lj.",
  ].join(" ");

  const messages = [
    { role: "system", content: system },
  ];

  // Ha tal√°ltunk friss adatot, add oda a modellnek ‚Äûeredm√©nyk√©nt‚Äù
  if (externalSnippet) {
    messages.push({
      role: "assistant",
      content: "Keres√©si eredm√©nyek (nyers):\n" + externalSnippet
    });
  }

  messages.push({ role: "user", content: rawMessage });

  try {
    const payload = {
      model: "gpt-4o-mini", // ezt k√©s≈ëbb √°t√≠rhatod GPT-4.1/5-re
      messages,
      temperature: 0.6,
      max_tokens: 400
    };

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });

    if (!r.ok) {
      const t = await r.text();
      console.error("OpenAI error:", r.status, t);
      const fb = externalSnippet || "Most nem √©rem el a modellt. Pr√≥b√°ld meg k√©s≈ëbb. üôÇ";
      return json(200, { reply: fb, version: BUILD_VERSION });
    }

    const data = await r.json();
    const reply = data.choices?.[0]?.message?.content?.trim()
      || externalSnippet
      || "Rendben. Miben seg√≠thetek m√©g?";
    return json(200, { reply, version: BUILD_VERSION });

  } catch (e) {
    console.error(e);
    const fb = externalSnippet || "Hopp, hiba t√∂rt√©nt. √çrd le r√∂viden, mire van sz√ºks√©ged, √©s seg√≠tek. üôÇ";
    return json(200, { reply: fb, version: BUILD_VERSION });
  }
}

// =================== Seg√©df√ºggv√©nyek ===================

function json(status, obj) {
  return {
    statusCode: status,
    headers: {
      "Content-Type": "application/json",
      "Access-Control-Allow-Origin": "*"
    },
    body: JSON.stringify(obj)
  };
}

function dayKey() {
  const d = new Date();
  return `${d.getUTCFullYear()}-${d.getUTCMonth()+1}-${d.getUTCDate()}`;
}

function getClientIP(event) {
  // Netlify: x-nf-client-connection-ip
  const h = event.headers || {};
  const a = h["x-nf-client-connection-ip"]
    || h["client-ip"]
    || h["x-forwarded-for"]
    || "";
  return String(a).split(",")[0].trim();
}

// ---- DDG / Bing keres≈ë √∂sszefoglal√≥
async function getBingSearchText(q){
  const key = process.env.BING_API_KEY;
  if (!key) throw new Error("NoBing");
  const url = `https://api.bing.microsoft.com/v7.0/search?q=${encodeURIComponent(q)}&mkt=hu-HU&safeSearch=Moderate`;
  const r = await fetch(url, { headers: { "Ocp-Apim-Subscription-Key": key } });
  if (!r.ok) throw new Error("Bing hiba");
  const j = await r.json();
  const items = j?.webPages?.value?.slice(0,3) || [];
  if (!items.length) return "Nem tal√°ltam j√≥ tal√°latot Binggel. Forr√°s: Bing üåê";
  return "Tal√°latok (Bing):\n" + items.map((it,i)=>`${i+1}. ${it.name}\n   ${it.snippet}\n   ${it.url}`).join("\n") + "\nForr√°s: Bing üåê";
}

async function getDDGISearchText(q){
  const url = `https://api.duckduckgo.com/?q=${encodeURIComponent(q)}&format=json&no_html=1&skip_disambig=1`;
  const r = await fetch(url);
  if (!r.ok) throw new Error("DDG hiba");
  const j = await r.json();
  const abs = j?.Abstract || j?.AbstractText || "";
  if (abs) return `DuckDuckGo: ${abs}\nForr√°s: DuckDuckGo üîç`;
  const rels = j?.RelatedTopics?.slice(0,3) || [];
  if (rels.length) {
    const lines = rels.map(rt => `‚Ä¢ ${(rt?.Text||"")}\n  ${(rt?.FirstURL||"")}`).join("\n");
    return `${lines}\nForr√°s: DuckDuckGo üîç`;
  }
  return "Nem tal√°ltam j√≥ tal√°latot.\nForr√°s: DuckDuckGo üîç";
}

async function getSearchText(q){
  try {
    return await getBingSearchText(q);
  } catch {
    // nincs Bing vagy hiba ‚Üí DDG
    return await getDDGISearchText(q);
  }
}

// ---- Sport: LEGUT√ìBBI meccs (TheSportsDB)
async function getSportLastMatchText(q){
  const t = (q||"").toLowerCase();
  const team = t.replace(/meccs|eredm√©ny|m√©rk≈ëz√©s|ki nyert|mikor j√°tszik|k√∂vetkez≈ë meccs|program|\?|\.|,|ma|tegnap|holnap/gi,"").trim();
  if (!team) return "√çrd be a csapat nev√©t is (pl. ‚Äûbarcelona legut√≥bbi meccs‚Äù).";

  const s = await fetch(`https://www.thesportsdb.com/api/v1/json/1/searchteams.php?t=${encodeURIComponent(team)}`);
  if (!s.ok) throw new Error("Sports search hiba");
  const sj = await s.json();
  const id = sj?.teams?.[0]?.idTeam;
  const name = sj?.teams?.[0]?.strTeam;
  if (!id) return "Nem tal√°ltam ilyen csapatot.";

  const last = await fetch(`https://www.thesportsdb.com/api/v1/json/1/eventslast.php?id=${id}`);
  if (!last.ok) throw new Error("Sports last hiba");
  const lj = await last.json();
  const ev = lj?.results?.[0];
  if (!ev) return `Nincs el√©rhet≈ë legut√≥bbi meccs: ${name}`;

  const home = ev.strHomeTeam, away = ev.strAwayTeam;
  const hs = ev.intHomeScore, as = ev.intAwayScore;
  const date = ev.dateEvent;
  return `Legut√≥bbi: ${home} ${hs}‚Äì${as} ${away} ‚Äî ${date}`;
}

// ---- Sport: K√ñVETKEZ≈ê meccs (TheSportsDB)
async function getSportNextMatchText(q){
  const t = (q||"").toLowerCase();
  const team = t.replace(/meccs|eredm√©ny|m√©rk≈ëz√©s|ki nyert|mikor j√°tszik|k√∂vetkez≈ë meccs|program|\?|\.|,|ma|tegnap|holnap/gi,"").trim();
  if (!team) return "√çrd be a csapat nev√©t is (pl. ‚Äûk√∂vetkez≈ë meccs Barcelona‚Äù).";

  const s = await fetch(`https://www.thesportsdb.com/api/v1/json/1/searchteams.php?t=${encodeURIComponent(team)}`);
  if (!s.ok) throw new Error("Sports search hiba");
  const sj = await s.json();
  const id = sj?.teams?.[0]?.idTeam;
  const name = sj?.teams?.[0]?.strTeam;
  if (!id) return "Nem tal√°ltam ilyen csapatot.";

  const nxt = await fetch(`https://www.thesportsdb.com/api/v1/json/1/eventsnext.php?id=${id}`);
  if (!nxt.ok) throw new Error("Sports next hiba");
  const nj = await nxt.json();
  const ev = nj?.events?.[0];
  if (!ev) return `Nincs el√©rhet≈ë k√∂zelg≈ë meccs: ${name}`;

  const home = ev.strHomeTeam, away = ev.strAwayTeam;
  const date = ev.dateEvent;
  const time = ev.strTime || "";
  const league = ev.strLeague || "";
  return `K√∂vetkez≈ë: ${home} vs ${away} ‚Äî ${date}${time ? " " + time : ""}${league ? " ‚Äî " + league : ""}`;
}

// ---- Mit k√©rj√ºnk kintr≈ël?
async function externalDataIfAny(message, bingKey){
  const t = (message || "").toLowerCase().trim();

  // Saj√°t bio ‚Äì gyakori n√©v miatt ne webet k√©rdezz√ºnk
  if (/\bhorv√°th\s+tam√°s\b/.test(t) || /\bhorvath\s+tamas\b/.test(t)) {
    return (
      "Horv√°th Tam√°s 26 √©ves √©s Szabolcsb√°k√°n √©l. El≈ësz√∂r alap szinten programozott, " +
      "ma m√°r halad√≥ szinten fejleszt. Tehets√©gesnek tartj√°k, mert a saj√°t m≈±k√∂d≈ë " +
      "mesters√©ges intelligens asszisztens√©t is megalkotta ‚Äî ez az oldal √©s az asszisztens " +
      "100%-ban az ≈ë tulajdona. A projekt hobbik√©nt indult, ig√©nyesen csiszolja, " +
      "√©s √∂r√∂mmel fogad visszajelz√©seket."
    );
  }

  // Sport ‚Äì k√∂vetkez≈ë / legut√≥bbi
  if (/(meccs|eredm√©ny|m√©rk≈ëz√©s|ki nyert|mikor j√°tszik|k√∂vetkez≈ë meccs|program|barca|barcelona|real madrid|liverpool|manchester|arsenal|chelsea|bayern|dortmund|juventus|milan|inter|psg)/.test(t)) {
    try {
      if (/mikor j√°tszik|k√∂vetkez≈ë meccs|program/.test(t)) {
        const nxt = await getSportNextMatchText(message);
        if (/Nem tal√°ltam|Nincs el√©rhet≈ë|√çrd be a csapat nev√©t/.test(nxt)) {
          return await getSearchText(`${message} k√∂vetkez≈ë meccs id≈ëpontja`);
        }
        return nxt;
      } else {
        const last = await getSportLastMatchText(message);
        if (/Nem tal√°ltam|Nincs el√©rhet≈ë|√çrd be a csapat nev√©t/.test(last)) {
          return await getSearchText(`${message} legut√≥bbi meccs eredm√©nye`);
        }
        return last;
      }
    } catch (e) {
      const q = /mikor j√°tszik|k√∂vetkez≈ë meccs|program/.test(t)
        ? `${message} k√∂vetkez≈ë meccs id≈ëpontja`
        : `${message} legut√≥bbi meccs eredm√©nye`;
      return await getSearchText(q);
    }
  }

  // √Åltal√°nos ‚Äûn√©zz ut√°na / keress‚Äù
  if (/(keress|n√©zz ut√°na|mit mondanak r√≥la|mi tal√°lhat√≥ r√≥la|hogy m≈±k√∂dik|mi ez|mi az|hogyan kell|√°r|v√©lem√©nyek|√∂sszehasonl√≠t√°s|h√≠rek|breaking|friss)/.test(t)) {
    try { return await getSearchText(message); }
    catch { return "Most nem √©rem el a keres≈ë szolg√°ltat√°st. üåê"; }
  }

  return null;
}

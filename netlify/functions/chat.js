// SAFE MODE (stabil, nincs 502) + smalltalk + "Rendben."-v√©d≈ë retry + 1√ó Forr√°sok

import OpenAI from "openai";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function handler(event) {
  if (event.httpMethod === "OPTIONS") return { statusCode: 204, headers: cors() };
  try {
    const { message = "" } = JSON.parse(event.body || "{}");
    const question = (message || "").trim();
    if (!question) return json({ error: "√úres √ºzenet." }, 400);

    // 0) Smalltalk/k√∂sz√∂n√©s ‚Äì gyors, bar√°ts√°gos v√°lasz (nincs b√∂ng√©sz√©s)
    if (isGreeting(question)) {
      return json({
        ok: true,
        question,
        answer:
          "Szia! Itt vagyok, seg√≠tek. K√©rdezz b√°rmit ‚Äì ha kell, b√∂ng√©szek √©s forr√°sokat is mutatok. üôÇ",
        meta: { safeMode: true, smalltalk: true }
      });
    }

    // 1) Keres√©si terv
    const plan = buildQueryPlan(question);

    // 2) Google keres√©s(ek) ‚Üí egyes√≠t√©s + URL-sz≈±r√©s
    let hits = [];
    for (const q of plan.queries) hits.push(...await googleSearch(q, plan.numPerQuery));
    hits = hits.filter(it => isValidHttpUrl(it?.link));
    if (!hits.length) {
      return json({
        ok: true, question,
        answer: "Nem tal√°ltam megb√≠zhat√≥ tal√°latot. Lehet, hogy m√©g nem publikus az inform√°ci√≥.",
        meta: { searchResults: 0, intent: plan.intent, safeMode: true }
      });
    }

    // 3) S√∫lyoz√°s + deduplik√°l√°s
    const ranked = rankAndFilter(hits, plan.maxKeep);

    // 4) Nagy, √∂sszef≈±z√∂tt kontextus a modellnek
    const sys =
      "Te Tam√°s bar√°ts√°gos magyar asszisztensed vagy. " +
      "KIZ√ÅR√ìLAG az al√°bb megadott tal√°latok (c√≠m + r√∂vid le√≠r√°s) tartalm√°b√≥l dolgozz; ne tal√°lj ki √∫j t√©nyeket. " +
      "Adj konkr√©t, l√©nyegre t√∂r≈ë v√°laszt magyarul. NE √≠rj k√ºl√∂n 'Forr√°sok' blokkot ‚Äì azt a rendszer teszi hozz√°. " +
      "Ha nincs el√©g inform√°ci√≥ a tal√°latokban, mondd ki vil√°gosan, hogy jelenleg nem publikus / nem tal√°lhat√≥.";
    const user = buildPromptFromSnippetsRich({ question, items: ranked, intent: plan.intent });

    let modelAnswer = await ask(sys, user);

    // 5) "Rendben." / t√∫l r√∂vid v√°lasz elleni v√©delem ‚Üí 1√ó retry m√°sik utas√≠t√°ssal
    if (isEmptyish(modelAnswer)) {
      const sys2 =
        "Adj KONKR√âT v√°laszt magyarul a megadott tal√°latok alapj√°n (sz√°m/n√©vsor/√∂sszefoglal√≥). " +
        "TILOS 'Rendben' vagy hasonl√≥ √ºres v√°laszt adni. NE √≠rj 'Forr√°sok' blokkot.";
      const user2 = user + "\n\nFIGYELEM: Ne adj √ºres visszajelz√©st ‚Äì √≠rj t√©nyleges tartalmat.";
      modelAnswer = await ask(sys2, user2);
      if (isEmptyish(modelAnswer)) {
        modelAnswer = "A tal√°latok alapj√°n nem tudok biztos, konkr√©t v√°laszt adni ‚Äì val√≥sz√≠n≈±leg m√©g nem publikus.";
      }
    }

    // 6) Egyszeri, deduplik√°lt Forr√°sok
    const sourcesBlock = renderSources(ranked);
    return json({
      ok: true,
      question,
      answer: modelAnswer + sourcesBlock,
      meta: { searchResults: ranked.length, intent: plan.intent, safeMode: true }
    });
  } catch (err) {
    return json({ error: err.message || String(err) }, 500);
  }
}

/* ============== Helpers ============== */
function cors() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type"
  };
}
function json(body, statusCode = 200) {
  return {
    statusCode,
    headers: { "Content-Type": "application/json; charset=utf-8", ...cors() },
    body: JSON.stringify(body, null, 2)
  };
}
const host = (u) => { try { return new URL(u).hostname.replace(/^www\./, ""); } catch { return ""; } };

function isValidHttpUrl(u) {
  if (typeof u !== "string") return false;
  try { const x = new URL(u); return x.protocol === "http:" || x.protocol === "https:"; }
  catch { return false; }
}

// k√∂sz√∂n√©s detekt√°l√°s
function isGreeting(q) {
  const s = q.toLowerCase().trim();
  const pats = ["szia", "hali", "hell√≥", "hello", "cs√°", "j√≥ napot", "j√≥ est√©t", "j√≥ reggelt", "√ºdv"];
  return pats.some(p => s === p || s.startsWith(p + "!") || s.startsWith(p + "."));
}

// √ºres / "rendben" v√°lasz detekt√°l√°s
function isEmptyish(ans) {
  if (!ans) return true;
  const a = ans.trim().toLowerCase();
  if (a.length < 8) return true;
  const bad = ["rendben", "ok", "ok√©", "oke", "okey", "ok√©.", "rendben."];
  return bad.includes(a);
}

// egyszer≈± OpenAI h√≠v√≥
async function ask(systemContent, userContent) {
  const res = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.1,
    messages: [{ role: "system", content: systemContent }, { role: "user", content: userContent }]
  });
  return res.choices?.[0]?.message?.content?.trim() || "";
}

/* ---- Keres√©si terv ---- */
function buildQueryPlan(question) {
  const q = question.toLowerCase();
  const queries = [question];
  const add = (...xs) => xs.forEach(x => queries.push(`${question} ${x}`));

  let intent = "generic";
  if (/\bszt√°rbox\b|sztarbox|szt√°r box/i.test(q)) {
    intent = "starbox";
    add("r√©sztvev≈ëk", "nevek", "versenyz≈ëk", "teljes n√©vsor", "hivatalos", "2025");
  }
  if (/\b√°rfolyam|eur(huf|huf)|eur√≥ √°rfolyam\b/i.test(q)) intent = "fx";
  if (/\bid≈ëj√°r√°s|meteo|el≈ërejelz√©s\b/i.test(q)) intent = "weather";

  return { intent, queries: [...new Set(queries)], numPerQuery: 10, maxKeep: 20 };
}

/* ---- Domain-s√∫lyoz√°s ---- */
const DOMAIN_SCORE = {
  "rtl.hu": 10, "24.hu": 9, "index.hu": 9, "telex.hu": 9, "hvg.hu": 9,
  "nemzetisport.hu": 8, "nso.hu": 8, "portfolio.hu": 9, "sportal.hu": 7,
  "blikk.hu": 7, "origo.hu": 7, "port.hu": 7, "nlc.hu": 7, "femina.hu": 6, "life.hu": 6
};
function rankAndFilter(items, maxKeep = 20) {
  const seen = new Set();
  const out = [];
  for (const it of items || []) {
    const lk = it?.link;
    if (!isValidHttpUrl(lk)) continue;
    if (seen.has(lk)) continue;
    seen.add(lk);
    const h = host(lk);
    const base = DOMAIN_SCORE[h] || (h.endsWith(".hu") ? 6 : 3);
    const bonus =
      (it.title?.toLowerCase().includes("r√©sztvev") ? 2 : 0) +
      (it.title?.toLowerCase().includes("hivatalos") ? 1 : 0);
    out.push({ ...it, _score: base + bonus });
  }
  out.sort((a, b) => b._score - a._score);
  return out.slice(0, maxKeep);
}

/* ---- Google keres√©s ---- */
async function googleSearch(q, num = 10) {
  const key = process.env.Google_API_KEY || process.env.GOOGLE_API_KEY;
  const cx  = process.env.Google_CX   || process.env.GOOGLE_CX;
  if (!key || !cx) return [];

  const url = new URL("https://www.googleapis.com/customsearch/v1");
  url.searchParams.set("key", key);
  url.searchParams.set("cx", cx);
  url.searchParams.set("q", q);
  url.searchParams.set("num", String(num));
  url.searchParams.set("safe", "active");
  url.searchParams.set("hl", "hu");
  url.searchParams.set("gl", "hu");

  const res = await fetch(url);
  if (!res.ok) return [];
  const data = await res.json();
  return (data.items || [])
    .map(it => ({ title: it.title, snippet: it.snippet, link: it.link }))
    .filter(it => isValidHttpUrl(it.link));
}

/* ---- Rich prompt a snippets-hez (√∂sszef≈±zve) ---- */
function buildPromptFromSnippetsRich({ question, items, intent }) {
  // 12 legjobb tal√°lat, √∂sszef≈±zve
  const joined = items.slice(0, 12).map((p, i) =>
`[${i + 1}] C√≠m: ${p.title}
Link: ${p.link}
Le√≠r√°s: ${p.snippet}
`).join("\n");

  let extra = "";
  if (intent === "starbox") {
    extra =
      "Ha a tal√°latok eml√≠tenek r√©sztvev≈ëket, adj list√°t: ‚Ä¢ N√©v ‚Äî 1 r√∂vid ismertet≈ë ‚Äî [HIVATALOS/PLETYKA]. " +
      "Ha nincs hivatalos lista, mondd ki egy√©rtelm≈±en. Ha ellentmond√°s van, jelezd.";
  } else if (intent === "fx") {
    extra = "Ha szerepel konkr√©t √°rfolyam a tal√°latokban, √≠rd le r√∂viden (pl. 'EUR/HUF ~395 ma'), √©s jelezd, hogy v√°ltozhat.";
  } else if (intent === "weather") {
    extra = "Adj 1‚Äì2 mondatos id≈ëj√°r√°s-√∂sszefoglal√≥t (hely, nap, h≈ëm√©rs√©klet, csapad√©k), ha a tal√°latok alapj√°n meg√≠t√©lhet≈ë.";
  }

  const answerShape =
    "V√°laszform√°tum: Kezdd a KONKR√âT v√°lasszal 1‚Äì2 mondatban (n√©vsor/sz√°m/t√©ny). " +
    "Ut√°na adj r√∂vid magyar√°zatot 1‚Äì3 mondatban. NE √≠rj 'Forr√°sok' list√°t.";

  return [
    `K√©rd√©s: ${question}`,
    extra,
    answerShape,
    "\n--- Tal√°latok (√∂sszef≈±zve) ---\n" + joined
  ].join("\n");
}

/* ---- Forr√°sblokk ---- */
function renderSources(results, limit = 6) {
  const uniq = uniqueByDomain(results, limit);
  if (!uniq.length) return "";
  const lines = uniq.map(r => `‚Ä¢ ${r.title || host(r.link)} ‚Äî ${host(r.link)}\n${r.link}`);
  return `\n\nForr√°sok:\n${lines.join("\n")}`;
}
function uniqueByDomain(list, limit = 6) {
  const map = new Map();
  for (const r of list || []) {
    const lk = r?.link;
    if (!isValidHttpUrl(lk)) continue;
    const h = host(lk);
    if (!h) continue;
    if (!map.has(h)) map.set(h, r);
    if (map.size >= limit) break;
  }
  return [...map.values()];
}

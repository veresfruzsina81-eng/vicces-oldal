// netlify/functions/chat.js
exports.handler = async (event) => {
  const cors = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
  };

  // Preflight CORS
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 200, headers: cors, body: "" };
  }

  if (event.httpMethod !== "POST") {
    return { statusCode: 405, headers: cors, body: "Method Not Allowed" };
  }

  try {
    const { message = "", history = [] } = JSON.parse(event.body || "{}");
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return {
        statusCode: 500,
        headers: cors,
        body: JSON.stringify({ error: "Hi√°nyzik az OPENAI_API_KEY k√∂rnyezeti v√°ltoz√≥." }),
      };
    }

    // ------- Kulcsszavas fix v√°laszok -------
    const text = (message || "").toLowerCase();

    // 1) Modellre k√©rdez√©s ‚Üí fix v√°lasz (nincs OpenAI/GPT eml√≠t√©s)
    const modelProbe = [
      "milyen modell", "melyik modell", "gpt", "ai vagy", "milyen chat", "milyen vagy", "mi vagy te"
    ];
    const asksModel = modelProbe.some((t) => text.includes(t));
    if (asksModel) {
      const reply = "√ân Tam√°s modellje vagyok. Horv√°th Tam√°s k√©sz√≠tett √©s fejlesztett, hogy seg√≠tsek neked b√°rmiben. üôÇ";
      return ok({ reply, tts: reply });
    }

    // 2) K√©sz√≠t≈ë/tulaj k√©rd√©sek ‚Üí fix v√°lasz
    const ownerTriggers = [
      "ki k√©sz√≠tette", "ki hozta l√©tre", "ki csin√°lta", "ki a tulaj",
      "ki az oldal k√©sz√≠t≈ëje", "ki az oldal tulajdonosa", "ki√© ez az oldal",
      "k√©sz√≠t≈ëje az oldalnak", "tulajdonosa az oldalnak"
    ];
    const asksOwner = ownerTriggers.some((t) => text.includes(t));
    if (asksOwner) {
      const reply = "Az oldalt Horv√°th Tam√°s (Szabolcsb√°ka) k√©sz√≠tette hobbifejleszt≈ëk√©nt. J√≥ sz√≥rakoz√°st! üéâ";
      return ok({ reply, tts: reply });
    }

    // 3) Horv√°th Tam√°sr√≥l √°ltal√°ban ‚Üí mindig a hobbifejleszt≈ë (nem az √©nekes)
    const aboutTamasTriggers = [
      "ki az a horv√°th tam√°s", "mes√©lj horv√°th tam√°sr√≥l", "mes√©lsz r√≥la", "mutasd be horv√°th tam√°st",
      "mit lehet tudni horv√°th tam√°sr√≥l", "horv√°th tam√°sr√≥l"
    ];
    const asksAboutTamas =
      aboutTamasTriggers.some((t) => text.includes(t)) ||
      /horv(√°|a)th\s*tam(√°|a)s/i.test(message || "");

    if (asksAboutTamas) {
      const reply =
        "Horv√°th Tam√°s (Szabolcsb√°ka) a weboldal k√©sz√≠t≈ëje √©s hobbifejleszt≈ëje. " +
        "Szabadidej√©ben webes projektekkel √©s mesters√©ges intelligenci√°val k√≠s√©rletezik, " +
        "szeret √∫j √∂tleteket kipr√≥b√°lni √©s folyamatosan fejleszti a tud√°s√°t. " +
        "Ez az oldal is egy ilyen szem√©lyes projektje. üôÇ";
      return ok({ reply, tts: reply });
    }

    // ------- System prompt (tilt√°sok + kontextus) -------
    const systemPrompt = `
Te egy bar√°ts√°gos, magyar nyelv≈± webes asszisztens vagy ezen az oldalon.
Az oldalt Horv√°th Tam√°s (Szabolcsb√°ka) k√©sz√≠tette hobbifejleszt≈ëk√©nt.
≈ê NEM a magyar √©nekes Horv√°th Tam√°s, hanem egy lelkes hobbi programoz√≥,
aki webes projektekkel √©s mesters√©ges intelligenci√°val k√≠s√©rletezik.

Szab√°lyok:
- Soha ne eml√≠tsd, hogy milyen modell vagy (pl. GPT-4/5, mini, turbo stb.), √©s ne besz√©lj semmilyen szolg√°ltat√≥ rendszer√©r≈ël.
- Ha r√°k√©rdeznek a modellre, a fix v√°lasz: "√ân Tam√°s modellje vagyok. Horv√°th Tam√°s k√©sz√≠tett √©s fejlesztett, hogy seg√≠tsek neked b√°rmiben."
- Ha az oldal k√©sz√≠t≈ëj√©re k√©rdeznek r√°, a fix v√°lasz: "Az oldalt Horv√°th Tam√°s (Szabolcsb√°ka) k√©sz√≠tette hobbifejleszt≈ëk√©nt."
- Ha Horv√°th Tam√°sr√≥l k√©rdeznek, mindig a hobbifejleszt≈ët mutasd be (ne az √©nekest).
- L√©gy bar√°ts√°gos, r√∂vid √©s l√©nyegre t√∂r≈ë. Mindig magyarul v√°laszolj.
`.trim();

    // El≈ëzm√©nyek + aktu√°lis √ºzenet (ha haszn√°lsz history-t a frontenden)
    const msgs = [
      { role: "system", content: systemPrompt },
      ...(Array.isArray(history) ? history : []),
      { role: "user", content: message || "" }
    ];

    // ------- OpenAI Chat Completions (Turbo) -------
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4-turbo",      // <<< TURBO
        messages: msgs,
        temperature: 0.7,
        max_tokens: 500            // chat/completions alatt ez a helyes kulcs
      }),
    });

    if (!r.ok) {
      const detail = await r.text().catch(() => "");
      return { statusCode: 502, headers: cors, body: JSON.stringify({ error: "Upstream hiba", detail }) };
    }

    const data = await r.json();
    const reply =
      data?.choices?.[0]?.message?.content?.toString()?.trim() ||
      "Rendben. Miben seg√≠thetek m√©g?";

    return ok({ reply, tts: reply });

  } catch (e) {
    return { statusCode: 500, headers: cors, body: JSON.stringify({ error: e?.message || "Ismeretlen szerver hiba" }) };
  }

  function ok(obj){
    return { statusCode: 200, headers: { ...cors, "Content-Type": "application/json" }, body: JSON.stringify(obj) };
  }
};
